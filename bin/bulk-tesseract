#!/usr/bin/env perl
use v5.18;
use strict;
use warnings;

use FindBin '$Bin';
use JSON;
use IO::All;
use Parallel::ForkManager;
use Getopt::Std;

my $JSON = JSON->new->utf8->pretty;

sub grok_boxes {
    my $workdir = shift;

    my %stats;
    for my $box ($workdir->all_files) {
        my ($left, $top, $right, $bottom) = $box->filename =~ m<box\-([0-9]+),([0-9]+),([0-9]+),([0-9]+)\.png\z> or next;
        next if ($right - $left < 10 || $bottom - $top < 10);

        say "processing " . $box->name;
        my $box_txt = $box->name =~ s/\.png\z//r;
        system("tesseract $box $box_txt -l chi_tra -psm 6") == 0 or die "tesserract failed: $! , $?";
    }

    my @boxes;
    for my $box ($workdir->all_files) {
        next unless $box->filename =~ m{box-(?<left>[0-9]+),(?<top>[0-9]+),(?<right>[0-9]+),(?<bottom>[0-9]+)\.txt};
        my $box_struct = {
            left => $+{left},
            top  => $+{top},
            right => $+{right},
            bottom => $+{bottom},
        };
        my $text = $box->utf8->all;
        $text =~ s/\s*\z//;
        $text =~ s/\A\s*//;
        push @boxes, {
            text => $text,
            box => $box_struct,
        }
    }
    return \@boxes;
}

my %opts;
getopts('j:', \%opts);
$opts{j} ||= 4;

my $forkman = Parallel::ForkManager->new($opts{j});

for my $dir (io("converted/pdf/")->all_dirs) {
    say "process $dir";

    my $uuid = $dir->filename;
    my @pages = $dir->catdir("pdftoppm")->all_files;
    for my $page (@pages){ 
        my ($page_number) =  $page->filename =~ m{page-(\d+)\.png};
        my $output_file = "data/pdf/$uuid/page-${page_number}.json";
        next if -f $output_file;

        $forkman->start and next;
        my $mask = $dir->catfile("edge", $page->filename);
        die "Expect a page edge mask file at @{[ $mask->name ]} but it is missing." unless $mask->exists;

        my $workdir = io->catdir("tesseract", "$uuid", "box", $page_number)->mkpath;

        my $cmd = "$^X $Bin/img-cut-by-edge.pl -o $workdir -i $page -m $mask";
        say "processing $uuid -- $cmd";
        system($cmd) == 0 or die "img-cut-by-edge failed: $! , $?";

        my $page_struct = {
            page_number => $page_number,
            text_boxes => grok_boxes($workdir)
        };
        io($output_file)->assert->print( $JSON->encode($page_struct) );
        $forkman->finish;
    }
}
$forkman->wait_all_children;
